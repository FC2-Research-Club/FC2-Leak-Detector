{
  "app_name": "FC2 Video Analyzer",
  "app_description": "FC2 Video Status Checking Tool",
  
  "main_menu": {
    "title": "Main Menu",
    "options": {
      "analyze_writer": "Analyze Author Works",
      "analyze_actress": "Analyze Actress Works",
      "batch_process": "Batch Processing",
      "extract_writers": "Extract Popular Authors",
      "show_config": "Show Configuration",
      "exit": "Exit Program"
    }
  },
  
  "general": {
    "yes": "Yes",
    "no": "No",
    "ok": "OK",
    "cancel": "Cancel",
    "back": "Back",
    "continue": "Continue",
    "success": "Success",
    "error": "Error",
    "warning": "Warning",
    "info": "Info",
    "loading": "Loading",
    "processing": "Processing",
    "completed": "Completed",
    "unknown": "Unknown"
  },
  
  "analyzer": {
    "fetch_author": "Get {entity_desc} name",
    "fetch_videos": "Fetching video list",
    "check_status": "Checking video status",
    "get_magnets": "Getting magnet links",
    "download_images": "Downloading thumbnails",
    "generate_report": "Generating report",
    "analyze_complete": "Analysis complete",
    "total_videos": "Total videos",
    "leaked_videos": "Leaked videos",
    "leaked_ratio": "Leak ratio",
    "check_failed": "Check failed",
    "video_id": "Video ID",
    "status": "Status",
    "leaked": "Leaked",
    "not_leaked": "Not leaked",
    "magnet_retries": "Magnet Retry Count",
    "magnet_retry_success": "Magnet Retry Success",
    "retry_success_ratio": "Retry Success Rate",
    "debug_info": "Debug Info",
    "found_magnets": "Found {len} magnet links, selecting the largest one",
    "api_url": "Name fetch URL: {url}",
    "api_data_parse_fail": "API data parsing failed: {error}",
    "get_name_error": "Error getting {entity_desc} name: {error}",
    "wait_retry": "Waiting {time} seconds before retry...",
    "name_not_found": "Could not get {entity_desc} name, using ID: {name}",
    "using_actress_path": "Using actress API path: {path}",
    "using_author_path": "Using author API path: {path}",
    "loaded_from_cache": "Loaded {count} videos from cache",
    "start_fetching": "Starting to get videos for {entity_desc} {id}...",
    "request_url": "Request URL: {url}",
    "api_request_failed": "API request failed: {status_code}",
    "api_empty_data": "API returned empty data, the {entity_desc} may not have videos",
    "actress_no_video_id": "No video_id field found in actress video data, skipping",
    "author_no_video_id": "Could not determine author video ID, skipping this video data",
    "process_video_error": "Error processing single video data: {error}",
    "fetch_page_error": "Error getting video list page {page}: {error}",
    "fetch_complete": "Retrieved {count} videos, starting to save cache...",
    "no_videos_found": "No videos found, please check if {entity_desc} ID is correct",
    "no_videos": "⚠️ No videos found for analysis",
    "display_error": "Error displaying results: {error}",
    "no_results": "[bold yellow]⚠️ No results to display[/bold yellow]",
    "author_name": "Author name",
    "author_name_success": "✅ {entity_desc} name: [cyan]{name}[/cyan]",
    "entity_type_actress": "Actress",
    "entity_type_writer": "Author",
    "progress_task": "{entity_type} video analysis progress",
    "start_analysis": "\n[bold cyan]Starting analysis for {entity_type} {id} [{name}] with {count} videos[/bold cyan]",
    "analysis_complete": "\n[bold green]✅ Analysis complete! Total {total} videos, {leaked} leaked (Leak ratio: {ratio:.1f}%)[/bold green]",
    "results_header": "\n[bold cyan]━━━━━━━━━━━━━━ {entity_type} Analysis Results ━━━━━━━━━━━━━━[/bold cyan]",
    "results_title": "[bold magenta]{entity_type} {id} [{name}][/bold magenta]",
    "category_column": "[bold]Category[/bold]",
    "count_column": "[bold]Count[/bold]",
    "percent_column": "[bold]Percentage[/bold]",
    "bar_column": "[bold]Status Bar[/bold]",
    "details_header": "\n[bold cyan]━━━━━━━━━━━━━━ Detailed Statistics ━━━━━━━━━━━━━━[/bold cyan]",
    "magnet_stats_header": "[bold magenta]== Magnet Statistics ==[/bold magenta]",
    "leaked_with_magnet": "Leaked videos with magnet",
    "leaked_without_magnet": "Leaked videos without magnet",
    "image_stats_header": "[bold magenta]== Image Statistics ==[/bold magenta]",
    "image_success": "Images downloaded successfully",
    "image_fail": "Image download failed",
    "summary_header": "\n[bold cyan]━━━━━━━━━━━━━━ Result Summary ━━━━━━━━━━━━━━[/bold cyan]",
    "item_column": "Item",
    "value_column": "Value",
    "total_videos_row": "Total videos:",
    "count_unit": "",
    "leaked_videos_row": "Leaked:",
    "leaked_count": "[bold green]{count}[/bold green] (with magnet: [bold]{with_magnet}[/bold])",
    "unleaked_videos_row": "Not leaked:",
    "error_count_row": "Check failed:",
    "leak_ratio_row": "Leak ratio:",
    "image_stats_row": "Image downloads:",
    "image_stats_value": "Success: [bold green]{success}[/bold green], Failed: [bold red]{fail}[/bold red]",
    "image_ratio_row": "Image download success rate:",
    "magnet_stats_row": "Magnet statistics:",
    "magnet_stats_value": "With magnet: [bold green]{with_magnet}[/bold green], Without: [bold red]{without_magnet}[/bold red]",
    "magnet_ratio_row": "Magnet retrieval success rate:",
    "magnet_retry_row": "Magnet retry count:",
    "magnet_retry_value": "[bold]{retries}[/bold] times, Success: [bold green]{success}[/bold green] times",
    "retry_ratio_row": "Magnet retry success rate:",
    "image_retry_row": "Image retry count:",
    "image_retry_value": "[bold]{retries}[/bold] times, Success: [bold green]{success}[/bold green] times",
    "image_retry_ratio_row": "Image retry success rate:"
  },
  
  "input_prompts": {
    "writer_id": "Please enter FC2 author ID: ",
    "actress_id": "Please enter actress ID",
    "batch_ids": "Please enter ID list (comma separated)",
    "threads": "Please enter thread count (default {max_workers}): ",
    "confirm_continue": "Continue?"
  },
  
  "errors": {
    "invalid_id": "❌ Author ID cannot be empty",
    "not_found": "Not found",
    "connection_error": "Connection error when getting {entity_type} name",
    "connection_error_info": "Network connection error, please check your network settings",
    "timeout": "Connection timeout when getting {entity_type} name",
    "timeout_info": "Network connection timeout, please check your network settings",
    "http_error": "HTTP error when getting {entity_type} name",
    "http_error_info": "HTTP request error {code}: {reason}",
    "no_videos": "No videos found for {entity_type} {id}",
    "no_videos_info": "No videos found, please check if ID is correct",
    "videos_connection_error": "Connection error when getting video list",
    "videos_timeout": "Connection timeout when getting video list",
    "videos_http_error": "HTTP error when getting video list",
    "json_error": "Format error when parsing video data",
    "json_error_info": "Data parsing error, please try again later",
    "analysis_error": "Error analyzing {entity_type} videos",
    "analysis_error_info": "An error occurred during video analysis: {error}",
    "permission_error": "Insufficient permissions when creating result directory",
    "permission_error_info": "No permission to create directory, please check permission settings",
    "os_error": "System error when creating result directory",
    "os_error_info": "System error, cannot create directory",
    "file_permission_error": "Insufficient permissions when writing result file",
    "file_permission_error_info": "No permission to write file, please check permission settings",
    "io_error": "I/O error when writing result file",
    "io_error_info": "I/O error, cannot write file",
    "report_error": "Error generating category report",
    "report_error_info": "An error occurred while generating report: {error}",
    "save_error": "Error saving results",
    "save_error_info": "An error occurred while saving results: {error}",
    "interrupted": "User interrupted the operation",
    "interrupted_info": "Operation has been interrupted by user",
    "missing_dependency": "Missing dependency: {lib}",
    "python_version": "Error: Python 3.8 or higher required",
    "error_interrupted": "Program interrupted by user",
    "error_argument": "Command line argument error",
    "error_runtime": "Runtime error occurred",
    "error_startup": "Program startup error"
  },
  
  "config": {
    "max_workers": "Max threads",
    "timeout": "Timeout (seconds)",
    "max_retries": "Max retries",
    "cache_ttl": "Cache validity (hours)",
    "check_sites": "Check sites",
    "config_info_title": "Current Configuration",
    "config_data_dir": "Data directory",
    "config_max_workers": "Max threads",
    "config_max_retries": "Max retries",
    "config_cache_ttl": "Cache validity",
    "config_hours": "hours",
    "config_language": "Current language"
  },
  
  "reports": {
    "no_data": "No data available for report generation",
    "summary": "Summary",
    "details": "Details",
    "statistics": "Statistics",
    "save_path": "Save path",
    "report_saved": "Report saved to: {path}",
    "entity_name": "{entity_desc} Name: {name}",
    "entity_name_special": "{entity_desc} Name: {entity_name} (contains special characters)",
    "analysis_time": "Analysis Time: {timestamp}",
    "summary_header": "\n=== Overall Statistics ===",
    "total_videos": "Total Videos: {count}",
    "leaked_videos": "Leaked Videos: {count}",
    "unleaked_videos": "Not Leaked Videos: {count}",
    "leak_ratio": "Leak Ratio: {ratio:.2f}%",
    "with_magnet": "With Magnet: {count}",
    "without_magnet": "Without Magnet: {count}",
    "leaked_list_header": "\n=== Leaked Videos List ===",
    "unleaked_list_header": "\n=== Not Leaked Videos List ===",
    "has_magnet": "[With Magnet]",
    "no_magnet": "[No Magnet]",
    "with_magnet_count": "Videos with Magnet: {count}",
    "without_magnet_count": "Videos without Magnet: {count}",
    "unleaked_count": "Not Leaked Videos: {count}",
    "video_entry": "=== {idx}. FC2-PPV-{vid} ===",
    "video_title": "Title: {title}",
    "magnet_link": "Magnet {num}: {link}",
    "no_magnet_found": "# [No magnet link found]",
    "error_time": "Time: {timestamp}",
    "error_video_id": "Video ID: {video_id}",
    "error_request_url": "Request URL: {url}",
    "error_response_status": "Response Status: {status}",
    "no_response": "No Response",
    "error_message": "Error Message: {message}",
    "error_response_content": "\nResponse Content:",
    "content_truncated": "...",
    "no_response_content": "No Response Content",
    "file_summary": "summary",
    "file_leaked_with_magnet": "leaked_with_magnet",
    "file_leaked_without_magnet": "leaked_without_magnet",
    "file_unleaked": "unleaked",
    "file_leaked_summary": "leaked_summary",
    "file_magnets": "magnets"
  },
  
  "usage_title": "Usage",
  "usage_options": "Options",
  "usage_help": "Show this help information",
  "usage_config": "Show configuration",
  "usage_sites": "Show check site list",
  "usage_writer": "Analyze videos by author ID",
  "usage_actress": "Analyze videos by actress ID",
  "usage_batch": "Batch process multiple author IDs (comma separated)",
  "usage_batch_actress": "Batch process multiple actress IDs (comma separated)",
  "usage_extract": "Extract popular author list",
  "usage_video": "Find and analyze author by video ID",
  "usage_threads": "Specify parallel thread count (default 30)",
  "usage_no_magnet": "Don't fetch magnet links",
  "usage_no_image": "Don't download video thumbnails",
  "usage_lang": "Set interface language (supported: zh, en, ja)",
  "usage_examples": "Examples",
  "example_writer": "Analyze author ID 5656 videos",
  "example_actress": "Analyze actress ID 5711 videos",
  "example_batch": "Batch process multiple authors",
  "example_batch_actress": "Batch process multiple actresses",
  "example_extract": "Extract popular author list",
  "example_video": "Find and analyze author by video ID",
  "example_config": "Show configuration",
  "example_threads": "Analyze author videos with 10 threads",
  "example_no_magnet": "Analyze actress videos without magnet links",
  "example_no_image": "Analyze author videos without thumbnails",
  "example_lang": "Use Japanese interface",
  "usage_clear_cache": "Clear all cache data",
  "example_clear_cache": "Clear all cache data",
  "clear_cache_start": "Starting to clear all cache data...",
  "clear_cache_success": "All cache data has been successfully cleared",
  "clear_cache_failed": "Failed to clear cache data",
  
  "sites_none": "No check sites configured, will use default sites",
  "sites_title": "Video Check Sites (sorted by priority)",
  "sites_name": "Site",
  "sites_url": "URL template",
  "sites_priority": "Priority",
  
  "threads_set": "Parallel thread count set to",
  "language_switched": "Language switched to",
  "language_unsupported": "Unsupported language",
  "language_supported": "Supported languages",
  
  "startup_time": "started at",
  "program_end": "Program execution completed",
  "time_spent": "time spent",
  "time_minutes": "min",
  "time_seconds": "sec",
  
  "extract_writers": {
    "start": "Starting to extract popular author list...",
    "success": "Successfully extracted {count} popular authors",
    "failure": "Failed to extract popular author list"
  },
  
  "ui_manager": {
    "error_import_rich": "Error: Unable to import rich library",
    "important_notice": "============== IMPORTANT NOTICE ==============",
    "rich_dependency": "FC2 Leak Detector relies on the rich library for beautiful interface and progress display.",
    "install_command": "Please use the following command to install the rich library:",
    "venv_notice": "If you are using a virtual environment, make sure to install it in the virtual environment:",
    "restart_notice": "Run the program again after installation is complete.",
    "progress_update_failed": "Progress bar update failed",
    "multi_author_analysis": "FC2 Multi-Author Analysis",
    "total": "Total",
    "count_unit": "",
    "idx": "No.",
    "author_id": "Author ID",
    "author_name": "Author Name",
    "total_videos": "Total Videos",
    "leaked": "Leaked",
    "status": "Status",
    "waiting": "Waiting",
    "total_progress": "Total Progress",
    "log_info": "Log Information",
    "processing_log": "Processing Log",
    "current_author_videos": "Current author has",
    "videos": "videos",
    "processing_videos": "Processing Videos",
    "processing_author": "Processing Author",
    "processing": "Processing",
    "start_processing_author": "Start processing author",
    "name": "Name",
    "value": "Value",
    "processed": "Processed",
    "progress": "Progress",
    "processing_status": "Processing Status",
    "author": "Author",
    "processing_completed": "processing completed",
    "completed": "Completed",
    "current_progress": "Current Progress",
    "total_processed_authors": "Processed",
    "authors": "authors",
    "completed_author": "Completed author",
    "add_log": "Add Log",
    "error": "Error",
    "finish_title": "Processing Complete",
    "finish_msg": "All authors processing completed",
    "summary_statistics": "Summary Statistics",
    "total_authors": "Total Authors",
    "total_leaked_videos": "Total Leaked Videos",
    "leak_ratio": "Leak Ratio",
    "with_magnet": "With Magnet",
    "setup_progress": "Setup Progress",
    "magnet_ratio": "Magnet Ratio",
    "image_downloaded": "Images Downloaded",
    "image_ratio": "Image Download Ratio",
    "preparing": "Preparing...",
    "retry_success_ratio": "Retry Success Rate"
  },
  
  "check_videos": {
    "entity_type_writer": "Author",
    "entity_type_actress": "Actress",
    "author_name_success": "✅ {entity_type} name: {name}",
    "author_name_error_connection": "Connection error when fetching {entity_type} name: {error}",
    "author_name_error_timeout": "Connection timeout when fetching {entity_type} name: {error}",
    "author_name_error_http": "HTTP error when fetching {entity_type} name: {code} - {reason}",
    "videos_not_found": "No videos found for {entity_type} {id}",
    "videos_error_connection": "Connection error when fetching video list: {error}",
    "videos_error_timeout": "Connection timeout when fetching video list: {error}",
    "videos_error_http": "HTTP error when fetching video list: {code} - {reason}",
    "videos_error_json": "JSON parsing error in video data: {error}",
    "videos_found": "Found {count} videos, starting analysis...",
    "analyze_error": "Error analyzing videos: {error}",
    "dir_error_permission": "Permission denied when creating result directory: {error}",
    "dir_error_system": "System error when creating result directory: {error}",
    "name_special_chars": "{entity_type} name contains special characters or is empty, using ID only for filename",
    "result_saved": "Results saved to: {path}",
    "write_error_permission": "Permission denied when writing result file: {error}",
    "write_error_io": "I/O error when writing result file: {error}",
    "report_success": "Successfully generated {count} category reports for {entity_type} {id}",
    "report_error": "Error generating category reports: {error}",
    "total_videos": "Total videos: {count}",
    "leaked_videos": "Leaked videos: {count}",
    "leaked_ratio": "Leak ratio: {ratio}%",
    "get_magnet_links": "[dim]Will fetch magnet links for leaked videos[/dim]",
    "download_thumbnails": "[dim]Will download video thumbnails[/dim]",
    "status_unavailable": "Not leaked",
    "status_error": "Error({status})"
  },
  
  "process_video": {
    "processing": "🔍 Processing video {id}",
    "leaked": "✅ Video {id} leaked ({entity_type}: {writer_id})",
    "found_magnet": "🧲 Video {id} magnet link found",
    "no_magnet": "⚠️ Video {id} no magnet link found",
    "magnet_error": "❌ Failed to get magnet link: {error}",
    "image_downloaded": "🖼️ Video {id} image downloaded",
    "image_failed": "⚠️ Video {id} image download failed",
    "image_error": "❌ Image download failed: {error}",
    "unleaked": "⚠️ Video {id} {status_display} ({entity_type}: {writer_id})",
    "processing_error": "❌ Error processing video {id}: {error}"
  },
  
  "logger": {
    "process_video_error": "Error processing video {video}: {error}",
    "video_check_response": "Video {video_id} response code {status_code} from site {site_name}, video is leaked",
    "video_not_leaked": "Video {video_id} not found on any site, video is not leaked",
    "video_check_error": "Error checking video {video_id} status: {error}",
    "prepare_magnet": "Preparing to get magnet link for video {video_id}",
    "magnet_retry": "Retrying to get magnet link ({attempt}/{max_retries}): {video_id}",
    "rate_limit": "Rate limited or access denied (status code: {status_code}), waiting {wait_time:.2f} seconds before retry",
    "no_torrent_table": "No torrent list table found",
    "no_magnet_found": "No magnet link found for video {video_id}",
    "magnet_response_failed": "Magnet link response failed, status code: {status_code}",
    "network_error": "Network error: {error}",
    "magnet_exception": "Exception getting magnet link: {error}",
    "get_magnet_failed": "Exception getting magnet link: {error}",
    "error_details_saved": "Error details saved: {filepath}",
    "error_log_failed": "Failed to save error log: {error}",
    "invalid_video_id": "Invalid video ID: {video_id}",
    "image_save_path": "Image save path: {save_path}, leak status: {status_desc}",
    "image_exists": "Thumbnail already exists, skipping download: {save_path}",
    "image_retry": "Retrying to download image ({attempt}/{max_retries}): {video_id}",
    "image_download_failed": "Image download failed, status code: {status_code}",
    "image_download_error": "Exception downloading image: {error}",
    "image_error": "Error downloading image for video {video_id}: {error}",
    "no_report_data": "No results available for report generation",
    "generate_report": "=== Generating Report ===",
    "original_writer_name": "Original writer_name: '{writer_name}'",
    "has_special_chars": "Contains special characters: {has_special_chars}",
    "name_special_chars": "Name contains special characters, using ID only",
    "file_prefix": "Generated file prefix: '{file_prefix}'",
    "magnet_file_generated": "Magnet-only file generated: {path}",
    "magnet_file_failed": "Failed to generate magnet-only file: {error}",
    "reports_generated": "Generated {count} report files",
    "report_failed": "Failed to generate report: {error}",
    "display_error": "Error displaying results: {error}",
    "video_check": "Checking video {video_id} if leaked on {site_name}",
    "checking_video": "Checking video {video_id} on {site_name}",
    "video_leaked": "Video {video_id} is leaked on {site_name}",
    "video_not_found": "Video {video_id} not found on {site_name}",
    "video_check_abnormal": "Abnormal status code when checking video {video_id} on {site_name}: {status_code}",
    "retry_suffix": " (retry {retry}/{max})",
    "request_step": "{step_name}{retry_suffix}",
    "request_failed": "Request failed: {error}",
    "max_retries": "Maximum retries reached, request failed: {url}",
    "wait_retry": "Waiting {wait_time:.2f} seconds before retrying...",
    "no_response": "No Response",
    "request_error_basic": "{step_name} request failed: URL={url}, status code={status_code}",
    "error_step": "Step: {step_name}",
    "response_preview": "\nResponse content preview:\n{content}",
    "load_language": "Loaded language: {language}",
    "load_language_failed": "Failed to load language {language}, trying default language {default_language}",
    "load_default_failed": "Failed to load default language {default_language}, using empty translation dictionary",
    "key_not_exist": "Translation key does not exist: {key} (language: {language})",
    "unsupported_language": "Unsupported language: {language}",
    "switch_language": "Switched language to: {language}",
    "translations_incomplete": "Translation files are incomplete:",
    "missing_keys": "  {lang}: missing {count} keys",
    "missing_key": "    - {key}",
    "more_keys": "    ... and {count} more keys",
    "save_language_pref": "Saved language preference: {language}",
    "load_language_pref": "Loaded language preference: {language}",
    "load_pref_failed": "Failed to load language preference: {error}"
  },
  
  "find_writer": {
    "start": "Starting to find author info by video ID {id}...",
    "found_username_no_id": "Found author username {username}, but could not get ID",
    "not_found": "Could not find author info for video ID {id}",
    "found": "Found author: ID={id}, username={username}",
    "analyze_start": "Starting to analyze all videos from author {id}...",
    "error_connection": "Connection error when finding author: {error}",
    "error_timeout": "Connection timeout when finding author: {error}",
    "error_json": "JSON parsing error with author data: {error}",
    "error_value": "Parameter error when finding author: {error}",
    "error_unknown": "Error finding author: {error}"
  },
  
  "checker": {
    "program_completed": "✅ Program execution completed! Results saved"
  },
  
  "sites": {
    "unknown": "Unknown Site",
    "24av": "24AV",
    "missav": "MissAV",
    "javbus": "JavBus"
  },
  
  "usage_jellyfin": "Generate Jellyfin compatible metadata for leaked videos; can be used independently to find analysis results from the last 48 hours",
  "example_jellyfin": "Analyze writer videos and generate Jellyfin metadata",
  
  "jellyfin": {
    "leaked_status": "Status: Leaked",
    "not_leaked_status": "Status: Not Leaked",
    "magnet_links": "Magnet Links:",
    "leaked_tag": "Leaked",
    "not_leaked_tag": "Not Leaked",
    "metadata_generated": "Generated Jellyfin metadata for {count} videos",
    "metadata_generated_batch": "Generated Jellyfin metadata for a total of {count} videos",
    "metadata_location": "Metadata saved to: {path}",
    "no_metadata_generated": "No Jellyfin metadata was generated successfully",
    "metadata_error": "Error generating Jellyfin metadata: {error}",
    "metadata_error_batch": "Error batch generating Jellyfin metadata: {error}",
    "initialize": "Initializing Jellyfin metadata generator, output directory: {path}",
    "start_batch": "Starting batch metadata generation for {count} videos (leaked only)",
    "found_image": "Found image for video {video_id}: {path}",
    "generate_start": "Starting metadata generation for video FC2-PPV-{video_id}",
    "fetch_extra_info": "Fetching additional info for video FC2-PPV-{video_id} from FC2PPVDB",
    "fetch_success": "Successfully fetched additional info for video FC2-PPV-{video_id}",
    "fetch_failed": "Failed to fetch FC2PPVDB page content: {url}",
    "page_fetch_failed": "Failed to fetch page, status code: {status_code}, URL: {url}",
    "save_metadata_success": "Successfully saved metadata file: {path}",
    "save_metadata_failed": "Failed to save metadata file: {error}",
    "copy_poster_success": "Successfully copied poster image: {path}",
    "copy_poster_failed": "Failed to copy poster image: {error}",
    "create_placeholder_success": "Successfully created MP4 placeholder file: {path}",
    "create_placeholder_failed": "Failed to create MP4 placeholder file: {error}",
    "no_leaked_videos": "No leaked videos found, skipping Jellyfin metadata generation",
    "generate_complete": "Metadata generation complete, successfully generated {count} metadata files",
    "ensure_dir": "Ensuring directory exists: {path}",
    "author_info": "Author info: ID={id}, Name={name}",
    "video_info": "Video info: ID={id}, Title={title}",
    "video_status": "Video status: {status}",
    "mosaic_type": "Mosaic type: {type}",
    "duration": "Duration: {duration}",
    "release_date": "Release date: {date}",
    "tags_found": "Tags found: {tags}",
    "watch_links": "Watch Links:",
    "using_author_dir": "Using author category directory: {dir}",
    "using_actress_dir": "Using actress category directory: {dir}"
  },
  
  "advanced_usage": "Advanced Usage",
  "advanced_example1": "Analyze author videos with 20 threads, generate Jellyfin metadata, and use English interface",
  "advanced_example2": "Batch process multiple authors with maximum 50 threads, without downloading thumbnails but with magnet links, and generate Jellyfin metadata",
  
  "magnet_only": {
    "retry_limit": "Retry Limit",
    "retry_success_ratio": "Retry Success Ratio",
    "display_count": "Display Count",
    "results_title": "Magnet Analysis Results",
    "top_title": "Top Magnet Rankings",
    "table_title": "Magnet Details",
    "rank": "Rank",
    "url": "URL",
    "size": "Size",
    "seeders": "Seeders",
    "leechers": "Leechers",
    "total_count": "Total",
    "empty_result": "No magnet information found"
  },

  "jellyfin_only": {
    "no_reports": "No analysis result files found, please use -a/-w/-b/-ba/-v parameters first",
    "no_recent_reports": "No analysis result files found within the last 48 hours, please use -a/-w/-b/-ba/-v parameters first",
    "found_reports": "Found the following {count} analysis results within the last 48 hours:",
    "unknown_name": "Unknown",
    "entity_name": "Name",
    "analysis_time": "Analysis time",
    "select_report": "Please enter the report number to use (press Enter to cancel)",
    "operation_cancelled": "Operation cancelled",
    "invalid_number": "Invalid number",
    "selected_report": "Selected",
    "confirm_selection": "Do you want to generate Jellyfin metadata using this report? (y/n)",
    "using_cache": "Using cached data",
    "invalid_cache": "Invalid or incomplete cache data",
    "cache_expired": "Cache data has expired",
    "cache_error": "Error reading cache",
    "parsing_report": "Parsing video information from report file...",
    "parse_error": "Error parsing report file",
    "parsing_summary": "Trying to parse from leaked videos summary file...",
    "summary_not_found": "Leaked videos summary file not found",
    "summary_parse_error": "Error parsing leaked videos summary file",
    "no_videos_found": "No video information found",
    "found_videos": "Found {count} videos, with {leaked} leaked",
    "jellyfin_metadata": "Jellyfin Metadata",
    "generation_success": "Successfully generated {count} Jellyfin metadata files",
    "generation_failed": "No Jellyfin metadata files were generated",
    "invalid_input": "Invalid input",
    "error": "Error generating Jellyfin metadata"
  },
  
  "jellyfin": {
    "initialize": "Initializing Jellyfin metadata generator, output directory: {path}",
    "generate_start": "Starting to generate metadata for video {video_id}",
    "fetch_extra_info": "Fetching extra information for video {video_id}",
    "fetch_failed": "Failed to fetch page: {url}",
    "fetch_success": "Successfully fetched extra information for video {video_id}",
    "watch_links": "Watch Links:",
    "magnet_links": "Magnet Links:",
    "found_image": "Found image for video {video_id}: {path}",
    "using_author_dir": "Using author subdirectory: {dir}",
    "using_actress_dir": "Using actress subdirectory: {dir}",
    "save_metadata_success": "Metadata saved successfully: {path}",
    "save_metadata_failed": "Failed to save metadata: {error}",
    "copy_poster_success": "Poster copied successfully: {path}",
    "copy_poster_failed": "Failed to copy poster: {error}",
    "create_placeholder_success": "Placeholder file created successfully: {path}",
    "create_placeholder_failed": "Failed to create placeholder file: {error}",
    "no_leaked_videos": "No leaked videos found, skipping Jellyfin metadata generation",
    "start_batch": "Starting batch metadata generation for {count} videos",
    "generate_complete": "Metadata generation complete, {count} files generated",
    "metadata_generated_batch": "Generated Jellyfin metadata for {count} videos in total",
    "metadata_location": "Metadata save location: {path}",
    "no_metadata_generated": "No Jellyfin metadata was successfully generated",
    "metadata_error_batch": "Error generating batch Jellyfin metadata: {error}"
  }
} 